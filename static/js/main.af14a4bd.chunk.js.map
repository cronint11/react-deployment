{"version":3,"sources":["components/EmployeeDirectory.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeDirectory","useState","employees","data","sortType","setSortType","filterType","setFilterType","onChange","e","target","value","sort","a","b","employee","filter","gender","toLowerCase","map","index","key","src","picture","thumbnail","alt","first","last","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6wRA4BeA,MAzBf,WAA8B,IAAD,EACHC,mBAASC,GADN,mBACpBC,EADoB,aAEKF,mBAAS,UAFd,mBAEpBG,EAFoB,KAEVC,EAFU,OAGSJ,mBAAS,IAHlB,mBAGpBK,EAHoB,KAGRC,EAHQ,KAK3B,OACE,6BACE,4BAAQC,SAAU,SAACC,GAAD,OAAOJ,EAAYI,EAAEC,OAAOC,SAC5C,4BAAQA,MAAM,SAAd,cACA,4BAAQA,MAAM,QAAd,cAEF,4BAAQH,SAAU,SAACC,GAAD,OAAOF,EAAcE,EAAEC,OAAOC,SAC9C,4BAAQA,MAAM,IAAd,aACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,QAAd,SAEF,4BACGR,EAAKS,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,SAASX,GAAYS,EAAEE,SAASX,IAAa,EAAI,KAAGY,QAAO,gBAAED,EAAF,EAAEA,SAAF,OAAiBT,GAAcS,EAASE,OAAOC,gBAAgBZ,EAAWY,iBAAeC,KAAI,SAACV,EAAGW,GAAJ,OAC7K,wBAAIC,IAAKD,GAAO,yBAAKE,IAAKb,EAAEM,SAASQ,QAAQC,UAAWC,IAAG,UAAKhB,EAAEM,SAASW,MAAhB,YAAyBjB,EAAEM,SAASY,QAAWP,EAA1G,IAAwI,WAAtBX,EAAEM,SAASE,OAAsB,IAAM,IAAzJ,IAA+JR,EAAEM,SAASW,MAA1K,IAAkLjB,EAAEM,SAASY,YCdxLC,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.af14a4bd.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport employees from \"../utils/employees.json\";\r\n\r\nfunction EmployeeDirectory() {\r\n  const [data, setData] = useState(employees);\r\n  const [sortType, setSortType] = useState('first');\r\n  const [filterType, setFilterType] = useState('');\r\n\r\n  return (\r\n    <div>\r\n      <select onChange={(e) => setSortType(e.target.value)}>\r\n        <option value=\"first\">First Name</option>\r\n        <option value=\"last\">Last Name</option>\r\n      </select>\r\n      <select onChange={(e) => setFilterType(e.target.value)}>\r\n        <option value=\"\">filter...</option>\r\n        <option value=\"female\">Female</option>\r\n        <option value=\"male\">Male</option>\r\n      </select>\r\n      <ul>\r\n        {data.sort((a, b) => b.employee[sortType] > a.employee[sortType] ? -1 : 1).filter(({employee}) => !filterType || employee.gender.toLowerCase()===filterType.toLowerCase()).map((e, index) => (\r\n          <li key={index}><img src={e.employee.picture.thumbnail} alt={`${e.employee.first} ${e.employee.last}`} />{index} {e.employee.gender === \"female\" ? \"f\" : \"m\"} {e.employee.first} {e.employee.last}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeDirectory;","import React from \"react\";\nimport EmployeeDirectory from \"./components/EmployeeDirectory.js\";\n\nfunction App() {\n  return <EmployeeDirectory />;\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}